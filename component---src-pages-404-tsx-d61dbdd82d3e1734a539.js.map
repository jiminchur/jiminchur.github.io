{"version":3,"file":"component---src-pages-404-tsx-d61dbdd82d3e1734a539.js","mappings":"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","sources":["webpack://minchur-gatsby-blog/./src/pages/404.tsx","webpack://minchur-gatsby-blog/./src/utils/validation.ts","webpack://minchur-gatsby-blog/./src/constants/index.ts","webpack://minchur-gatsby-blog/./src/components/common/Seo.tsx"],"sourcesContent":["import { HeadFC, Link } from 'gatsby'\nimport styled from 'styled-components'\nimport SEO from '../components/common/Seo'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 150px 0;\n`\n\nconst Title = styled.div`\n  font-size: 30px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`\n\nconst Description = styled.div`\n  margin-top: 10px;\n  font-size: 20px;\n  font-weight: 300;\n\n  @media (max-width: 768px) {\n    font-size: 18px;\n  }\n`\n\nconst PageLink = styled(Link)`\n  margin-top: 30px;\n  font-size: 15px;\n  color: inherit;\n`\n\nexport default function NotFoundPage() {\n  return (\n    <Wrapper>\n      <Title>페이지를 찾을 수 없습니다.</Title>\n      <Description>다른 콘텐츠를 보러 가보시겠어요?</Description>\n      <PageLink to=\"/\">메인 페이지로</PageLink>\n    </Wrapper>\n  )\n}\n\nexport const Head: HeadFC = () => <SEO />\n","/**\n * 입력 검증 및 XSS 방지 유틸리티 함수들\n */\n\n/**\n * 문자열을 안전하게 정리합니다\n */\nexport const sanitizeString = (\n  str: string | undefined,\n  maxLength = 300,\n): string => {\n  if (!str) return ''\n\n  return str\n    .replace(/[<>]/g, '') // 기본적인 HTML 태그 제거\n    .replace(/javascript:/gi, '') // javascript: 프로토콜 제거\n    .replace(/on\\w+\\s*=/gi, '') // 이벤트 핸들러 제거\n    .trim()\n    .slice(0, maxLength) // 최대 길이 제한\n}\n\n/**\n * URL을 안전하게 정리합니다\n */\nexport const sanitizeUrl = (url: string | undefined): string => {\n  if (!url) return ''\n\n  // URL 검증: http, https, 상대경로만 허용\n  if (\n    url.startsWith('http://') ||\n    url.startsWith('https://') ||\n    url.startsWith('/')\n  ) {\n    return url.replace(/[<>\"']/g, '') // 위험한 문자 제거\n  }\n\n  return ''\n}\n\n/**\n * HTML 태그를 완전히 제거합니다\n */\nexport const stripHtmlTags = (html: string): string => {\n  return html.replace(/<[^>]*>/g, '')\n}\n\n/**\n * 이메일 주소가 유효한지 검증합니다\n */\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n/**\n * 슬러그가 유효한지 검증합니다\n */\nexport const isValidSlug = (slug: string): boolean => {\n  const slugRegex = /^[a-z0-9-]+$/\n  return slugRegex.test(slug)\n}\n","/**\n * 프로젝트 전체에서 사용되는 상수들\n */\n\n// 사이트 기본 정보\nexport const SITE_CONFIG = {\n  TITLE: 'Minchur Gatsby Blog',\n  DESCRIPTION: '개발과 기술에 대한 이야기를 담은 블로그입니다.',\n  URL: 'https://jiminchur.github.io',\n  AUTHOR: 'MinChur',\n  LOCALE: 'ko-KR',\n} as const\n\n// 페이징 설정\nexport const PAGINATION = {\n  POSTS_PER_PAGE: 10,\n  RELATED_POSTS_LIMIT: 3,\n} as const\n\n// 검색 설정\nexport const SEARCH_CONFIG = {\n  MAX_RESULTS: 20,\n  MIN_SEARCH_LENGTH: 2,\n  DEBOUNCE_DELAY: 300,\n} as const\n\n// 읽기 경험 설정\nexport const READING_CONFIG = {\n  WORDS_PER_MINUTE: 200,\n  TABLE_OF_CONTENTS_MIN_HEADINGS: 3,\n} as const\n\n// 스타일 관련 상수\nexport const THEME = {\n  BREAKPOINTS: {\n    MOBILE: '768px',\n    TABLET: '1024px',\n    DESKTOP: '1200px',\n  },\n  Z_INDEX: {\n    SCROLL_TO_TOP: 1000,\n    SEARCH_DROPDOWN: 1001,\n    MODAL: 1002,\n    TOOLTIP: 1003,\n  },\n  ANIMATION: {\n    DURATION: {\n      FAST: '0.15s',\n      NORMAL: '0.3s',\n      SLOW: '0.5s',\n    },\n    EASING: {\n      EASE_OUT: 'cubic-bezier(0.215, 0.61, 0.355, 1)',\n      EASE_IN_OUT: 'cubic-bezier(0.645, 0.045, 0.355, 1)',\n    },\n  },\n} as const\n\n// 에러 메시지\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: '네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',\n  NOT_FOUND: '요청하신 페이지를 찾을 수 없습니다.',\n  INVALID_INPUT: '입력값이 올바르지 않습니다.',\n  SEARCH_FAILED: '검색 중 오류가 발생했습니다.',\n} as const\n\n// 성공 메시지\nexport const SUCCESS_MESSAGES = {\n  COPIED_TO_CLIPBOARD: '클립보드에 복사되었습니다!',\n  SEARCH_COMPLETED: '검색이 완료되었습니다.',\n} as const\n\n// 라우트 경로\nexport const ROUTES = {\n  HOME: '/',\n  ABOUT: '/about',\n  POSTS: '/posts',\n  CATEGORIES: '/categories',\n  SEARCH: '/search',\n} as const\n\n// 외부 링크\nexport const EXTERNAL_LINKS = {\n  GITHUB: 'https://github.com/jiminchur',\n  LINKEDIN: 'https://linkedin.com/in/jiminchur',\n} as const\n\n// 개발 환경 설정\nexport const DEV_CONFIG = {\n  LOG_LEVEL: process.env.NODE_ENV === 'development' ? 'debug' : 'error',\n  ENABLE_ANALYTICS: process.env.NODE_ENV === 'production',\n} as const\n\n// 정규식 패턴\nexport const REGEX_PATTERNS = {\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  SLUG: /^[a-z0-9-]+$/,\n  KOREAN: /[가-힣]/,\n  WHITESPACE: /\\s+/g,\n  HTML_TAGS: /<[^>]*>/g,\n} as const\n","import { graphql, useStaticQuery } from 'gatsby'\nimport type { SeoProps, SiteQuery } from '../../types'\nimport { sanitizeString, sanitizeUrl } from '../../utils/validation'\nimport { SITE_CONFIG } from '../../constants'\n\nconst METADATA_QUERY = graphql`\n  query SeoMetadataQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    file(name: { eq: \"thumbnail\" }) {\n      publicURL\n    }\n  }\n`\n\ninterface MetadataQueryResult extends SiteQuery {\n  file?: {\n    publicURL: string\n  }\n}\n\nexport default function SEO({\n  title,\n  description,\n  pathname = '',\n  image,\n  children,\n}: SeoProps) {\n  const queryResult = useStaticQuery<MetadataQueryResult>(METADATA_QUERY)\n  const { site, file } = queryResult\n\n  // 메타데이터 생성 (입력 검증 적용)\n  const metadata = {\n    title: sanitizeString(title) || sanitizeString(site.siteMetadata.title),\n    description:\n      sanitizeString(description) ||\n      sanitizeString(site.siteMetadata.description),\n    siteUrl: `${site.siteMetadata.siteUrl}${sanitizeUrl(pathname)}`,\n    image: sanitizeUrl(image) || file?.publicURL || '',\n    siteName: sanitizeString(site.siteMetadata.title),\n  }\n\n  // 구조화 데이터 생성\n  const structuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    name: metadata.siteName,\n    description: metadata.description,\n    url: metadata.siteUrl,\n    author: {\n      '@type': 'Person',\n      name: SITE_CONFIG.AUTHOR,\n    },\n    ...(metadata.image && { image: metadata.image }),\n  }\n\n  return (\n    <>\n      <title>{metadata.title}</title>\n      <html lang={SITE_CONFIG.LOCALE} />\n\n      {/* 기본 메타태그 */}\n      <meta name=\"description\" content={metadata.description} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta httpEquiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\n\n      {/* 보안 및 SEO 메타태그 */}\n      <meta name=\"robots\" content=\"index,follow\" />\n      <meta name=\"format-detection\" content=\"telephone=no\" />\n      <meta name=\"author\" content={SITE_CONFIG.AUTHOR} />\n\n      {/* Open Graph 메타태그 */}\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={metadata.title} />\n      <meta property=\"og:description\" content={metadata.description} />\n      <meta property=\"og:url\" content={metadata.siteUrl} />\n      <meta property=\"og:site_name\" content={metadata.siteName} />\n      <meta property=\"og:locale\" content={SITE_CONFIG.LOCALE} />\n      {metadata.image && <meta property=\"og:image\" content={metadata.image} />}\n\n      {/* Twitter Card 메타태그 */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={metadata.title} />\n      <meta name=\"twitter:description\" content={metadata.description} />\n      {metadata.image && <meta name=\"twitter:image\" content={metadata.image} />}\n\n      {/* 정규 URL */}\n      <link rel=\"canonical\" href={metadata.siteUrl} />\n\n      {/* JSON-LD 구조화 데이터 */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(structuredData)}\n      </script>\n\n      {children}\n    </>\n  )\n}\n"],"names":["Wrapper","styled","div","displayName","componentId","Title","Description","PageLink","Link","NotFoundPage","_jsxs","children","_jsx","to","Head","SEO","sanitizeString","str","maxLength","replace","trim","slice","sanitizeUrl","url","startsWith","SITE_CONFIG","TITLE","DESCRIPTION","URL","AUTHOR","LOCALE","METADATA_QUERY","title","description","pathname","image","queryResult","useStaticQuery","site","file","metadata","siteMetadata","siteUrl","publicURL","siteName","structuredData","name","author","lang","content","httpEquiv","property","rel","href","type","JSON","stringify"],"sourceRoot":""}